package com.yu.hu.traveling.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yu.hu.traveling.entity.user.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "tb_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property EmailVerified = new Property(4, boolean.class, "emailVerified", false, "EMAIL_VERIFIED");
        public final static Property PhoneNumber = new Property(5, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property PhoneNumberVerified = new Property(6, boolean.class, "phoneNumberVerified", false, "PHONE_NUMBER_VERIFIED");
        public final static Property Img = new Property(7, String.class, "img", false, "IMG");
        public final static Property BackgroundImg = new Property(8, String.class, "backgroundImg", false, "BACKGROUND_IMG");
        public final static Property Signature = new Property(9, String.class, "signature", false, "SIGNATURE");
        public final static Property Gender = new Property(10, String.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(11, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Area = new Property(12, String.class, "area", false, "AREA");
        public final static Property Level = new Property(13, int.class, "level", false, "LEVEL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"PASSWORD\" TEXT," + // 2: password
                "\"EMAIL\" TEXT," + // 3: email
                "\"EMAIL_VERIFIED\" INTEGER NOT NULL ," + // 4: emailVerified
                "\"PHONE_NUMBER\" TEXT," + // 5: phoneNumber
                "\"PHONE_NUMBER_VERIFIED\" INTEGER NOT NULL ," + // 6: phoneNumberVerified
                "\"IMG\" TEXT," + // 7: img
                "\"BACKGROUND_IMG\" TEXT," + // 8: backgroundImg
                "\"SIGNATURE\" TEXT," + // 9: signature
                "\"GENDER\" TEXT," + // 10: gender
                "\"BIRTHDAY\" INTEGER," + // 11: birthday
                "\"AREA\" TEXT," + // 12: area
                "\"LEVEL\" INTEGER NOT NULL );"); // 13: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getEmailVerified() ? 1L: 0L);
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
        stmt.bindLong(7, entity.getPhoneNumberVerified() ? 1L: 0L);
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
 
        String backgroundImg = entity.getBackgroundImg();
        if (backgroundImg != null) {
            stmt.bindString(9, backgroundImg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(11, gender);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday.getTime());
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(13, area);
        }
        stmt.bindLong(14, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getEmailVerified() ? 1L: 0L);
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
        stmt.bindLong(7, entity.getPhoneNumberVerified() ? 1L: 0L);
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
 
        String backgroundImg = entity.getBackgroundImg();
        if (backgroundImg != null) {
            stmt.bindString(9, backgroundImg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(11, gender);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday.getTime());
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(13, area);
        }
        stmt.bindLong(14, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.getShort(offset + 4) != 0, // emailVerified
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNumber
            cursor.getShort(offset + 6) != 0, // phoneNumberVerified
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // backgroundImg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // signature
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gender
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // birthday
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // area
            cursor.getInt(offset + 13) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmailVerified(cursor.getShort(offset + 4) != 0);
        entity.setPhoneNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNumberVerified(cursor.getShort(offset + 6) != 0);
        entity.setImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBackgroundImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSignature(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGender(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBirthday(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setArea(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLevel(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
